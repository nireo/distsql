// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: proto/store.proto

package store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	Execute(ctx context.Context, in *Request, opts ...grpc.CallOption) (*StoreExecResponse, error)
	Query(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*StoreQueryResponse, error)
	ExecString(ctx context.Context, in *ExecStringReq, opts ...grpc.CallOption) (*StoreExecResponse, error)
	QueryString(ctx context.Context, in *QueryStringReq, opts ...grpc.CallOption) (*StoreQueryResponse, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) Execute(ctx context.Context, in *Request, opts ...grpc.CallOption) (*StoreExecResponse, error) {
	out := new(StoreExecResponse)
	err := c.cc.Invoke(ctx, "/store.Store/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) Query(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*StoreQueryResponse, error) {
	out := new(StoreQueryResponse)
	err := c.cc.Invoke(ctx, "/store.Store/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) ExecString(ctx context.Context, in *ExecStringReq, opts ...grpc.CallOption) (*StoreExecResponse, error) {
	out := new(StoreExecResponse)
	err := c.cc.Invoke(ctx, "/store.Store/ExecString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) QueryString(ctx context.Context, in *QueryStringReq, opts ...grpc.CallOption) (*StoreQueryResponse, error) {
	out := new(StoreQueryResponse)
	err := c.cc.Invoke(ctx, "/store.Store/QueryString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	Execute(context.Context, *Request) (*StoreExecResponse, error)
	Query(context.Context, *QueryReq) (*StoreQueryResponse, error)
	ExecString(context.Context, *ExecStringReq) (*StoreExecResponse, error)
	QueryString(context.Context, *QueryStringReq) (*StoreQueryResponse, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) Execute(context.Context, *Request) (*StoreExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedStoreServer) Query(context.Context, *QueryReq) (*StoreQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedStoreServer) ExecString(context.Context, *ExecStringReq) (*StoreExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecString not implemented")
}
func (UnimplementedStoreServer) QueryString(context.Context, *QueryStringReq) (*StoreQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryString not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Execute(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).Query(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_ExecString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecStringReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).ExecString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/ExecString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).ExecString(ctx, req.(*ExecStringReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_QueryString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStringReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).QueryString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.Store/QueryString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).QueryString(ctx, req.(*QueryStringReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _Store_Execute_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Store_Query_Handler,
		},
		{
			MethodName: "ExecString",
			Handler:    _Store_ExecString_Handler,
		},
		{
			MethodName: "QueryString",
			Handler:    _Store_QueryString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/store.proto",
}
